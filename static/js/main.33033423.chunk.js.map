{"version":3,"sources":["assets/down-arrow.svg","assets/teacher1.svg","containers/RomanNumerals.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RomanNumerals","useState","num","roman","values","setValues","handleChange","e","target","name","value","RenderSVG","className","src","alt","teacherIcon","type","onChange","arrow","romanLetters","Numbers","length","i","ToRoman","parseInt","romanNumber","toUpperCase","Dictionary","I","V","X","L","C","D","M","letterToNum","letter","split","reduce","acc","curr","index","arr","FromRoman","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAAe,MAA0B,uCCA1B,MAA0B,qC,MCsG1BA,MAxFf,WACE,IADuB,EAKKC,mBAJN,CACpBC,IAAK,GACLC,MAAO,KAHc,mBAKhBC,EALgB,KAKRC,EALQ,KAuDjBC,EAAe,SAACC,GACpBF,EAAU,2BAAKD,GAAN,kBAAeG,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAG7CC,EAAY,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,IAC9B,OAAO,qBAAKA,IAAKA,EAAKD,UAAWA,EAAWE,IAAI,cAGlD,OACE,sBAAKF,UAAU,YAAf,UACE,cAACD,EAAD,CAAWE,IAAKE,EAAaH,UAAU,UACvC,uBAAMA,UAAU,YAAhB,UACE,gCACE,2EAEE,uBAAOI,KAAK,OAAOP,KAAK,MAAMQ,SAAUX,OAE1C,cAACK,EAAD,CAAWE,IAAKK,EAAON,UAAU,UACjC,4BAnER,SAAiBV,GAmBf,IAlBA,IAAIC,EAAQ,GACVgB,EAAe,CACb,IACA,KACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,KACA,KAEFC,EAAU,CAAC,IAAM,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAC1DC,EAASF,EAAaE,OACnBC,EAAI,EAAGA,EAAID,EAAQC,IAC1B,KAAOpB,GAAOkB,EAAQE,IACpBnB,GAAgBgB,EAAaG,GAC7BpB,GAAYkB,EAAQE,GAGxB,OAAOnB,EA0CGoB,CAAQC,SAASpB,EAAOF,WAE9B,gCACE,gFAEE,uBAAOc,KAAK,OAAOP,KAAK,QAAQQ,SAAUX,OAE5C,cAACK,EAAD,CAAWE,IAAKK,EAAON,UAAU,UACjC,4BA/CR,SAAmBa,GACjBA,EAAcA,EAAYC,cAC1B,IAAMC,EAAuB,CAC3BC,EAAG,EACHC,EAAG,EACHC,EAAG,GACHC,EAAG,GACHC,EAAG,IACHC,EAAG,IACHC,EAAG,KAECC,EAAc,SAACC,GAAD,OAAoBT,EAAWS,IACnD,OAAOX,EAAYY,MAAM,IAAIC,QAAO,SAACC,EAAKC,EAAMC,EAAOC,GACrD,OAAIP,EAAYK,GAAQL,EAAYO,EAAID,EAAQ,IACvCF,EAAMJ,EAAYK,GAElBD,EAAMJ,EAAYK,KAE1B,GA6BOG,CAAUvC,EAAOD,mB,MClFhByC,MATf,WACE,OACE,sBAAKhC,UAAU,MAAf,kBAEE,cAAC,EAAD,QCMSiC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.33033423.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/down-arrow.bf347bdf.svg\";","export default __webpack_public_path__ + \"static/media/teacher1.c80693f8.svg\";","import React, { useState } from \"react\";\nimport arrow from \"../assets/down-arrow.svg\";\nimport teacherIcon from \"../assets/teacher1.svg\";\nimport \"./RomanNumerals.css\";\n\ntype RomanNumeral = {\n  num: string;\n  roman: string;\n};\n\ntype IMatches = {\n  [key: string]: number;\n};\n\nfunction RomanNumerals() {\n  const INITIAL_STATE = {\n    num: \"\",\n    roman: \"\",\n  };\n  const [values, setValues] = useState<RomanNumeral>(INITIAL_STATE);\n  function ToRoman(num: number) {\n    let roman = \"\",\n      romanLetters = [\n        \"M\",\n        \"CM\",\n        \"D\",\n        \"CD\",\n        \"C\",\n        \"XC\",\n        \"L\",\n        \"XL\",\n        \"X\",\n        \"IX\",\n        \"V\",\n        \"IV\",\n        \"I\",\n      ],\n      Numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const length = romanLetters.length;\n    for (let i = 0; i < length; i++) {\n      while (num >= Numbers[i]) {\n        roman = roman + romanLetters[i];\n        num = num - Numbers[i];\n      }\n    }\n    return roman;\n  }\n\n  function FromRoman(romanNumber: string) {\n    romanNumber = romanNumber.toUpperCase();\n    const Dictionary: IMatches = {\n      I: 1,\n      V: 5,\n      X: 10,\n      L: 50,\n      C: 100,\n      D: 500,\n      M: 1000,\n    };\n    const letterToNum = (letter: string) => Dictionary[letter];\n    return romanNumber.split(\"\").reduce((acc, curr, index, arr) => {\n      if (letterToNum(curr) < letterToNum(arr[index + 1])) {\n        return acc - letterToNum(curr);\n      } else {\n        return acc + letterToNum(curr);\n      }\n    }, 0);\n  }\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setValues({ ...values, [e.target.name]: e.target.value });\n  };\n\n  const RenderSVG = ({ className, src }: string | any) => {\n    return <img src={src} className={className} alt=\"svg icon\" />;\n  };\n\n  return (\n    <div className=\"container\">\n      <RenderSVG src={teacherIcon} className=\"board\" />\n      <form className=\"converter\">\n        <div>\n          <label>\n            Try to add a number between 1 and 3999\n            <input type=\"text\" name=\"num\" onChange={handleChange} />\n          </label>\n          <RenderSVG src={arrow} className=\"arrow\" />\n          <p>{ToRoman(parseInt(values.num))}</p>\n        </div>\n        <div>\n          <label>\n            Try to add a letters of I, V, X, L, C, D, M\n            <input type=\"text\" name=\"roman\" onChange={handleChange} />\n          </label>\n          <RenderSVG src={arrow} className=\"arrow\" />\n          <p>{FromRoman(values.roman)}</p>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default RomanNumerals;\n","import React from 'react';\nimport RomanNumerals from './containers/RomanNumerals';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      hello\n      <RomanNumerals />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}